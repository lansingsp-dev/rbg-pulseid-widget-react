/* App.module.css */

@import url('https://fonts.googleapis.com/css2?family=Mulish:wght@400;600;700&display=swap');

:root {
  --rbg-primary: #01415c;      /* brand blue/teal */
  --rbg-white: #ffffff;
  --rbg-light: #eaeaea;        /* light gray */
  --rbg-dark: #222222;         /* near-black */
  --rbg-accent-orange: #c0550d;
  --rbg-accent-green: #3d853f;
  --radius-md: 6px;
  --shadow-soft: 0 -2px 6px rgba(0, 0, 0, 0.1);
  --shadow-drawer: 0 -2px 8px rgba(0, 0, 0, 0.15);
  --swatch: var(--rbg-white); /* default swatch color */
  --space-xs: 4px;
  --space-sm: 8px;
  --space-md: 12px;
  --space-lg: 16px;
  --section-gap-mobile: 1rem;
  --section-gap-desktop: 1.75rem;
}

html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  overflow: hidden;
}

.container {
  display: flex;
  flex-direction: row;
  height: 100vh;       /* fill the viewport */
  overflow: hidden;    /* page doesn't scroll; right panel will */
  font-family: 'Mulish', sans-serif;
  color: var(--rbg-dark);
}

.imageContainer {
  flex: 0 0 auto;
  text-align: center;
  padding: 0.5rem;
  background: var(--rbg-white);
}

.image {
  width: 100%;
  max-width: 300px;
  height: auto;
  max-height: 100vh;   /* never exceed viewport height */
  object-fit: contain;
  margin: 0 auto;
}

.controlContainer {
  flex: 1 1 auto;
  min-height: 0;       /* IMPORTANT: allow overflow in flex child */
  overflow-y: auto;    /* scroll vertically when content is taller than viewport */
  overflow-x: hidden;  /* prevent horizontal scroll of the whole right panel */
  padding: 0.5rem 1rem;
  color: var(--rbg-dark);
}

.labelInputDiv {
    margin-bottom: var(--section-gap-mobile);
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.sectionLabel {
  display: block;
  font-weight: 700;
  margin-bottom: 0;
  color: var(--rbg-dark);
}


.fontButtonRow {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  align-items: center;
}

.fontButton,
.fontButtonSelected {
  padding: 0.25rem 0.5rem;
  border-radius: var(--radius-md);
  background-color: var(--rbg-white);
  cursor: pointer;
  font-size: 14px;
  width: 90px;
  height: 60px;
  color: var(--rbg-dark);
}

/* Template selector buttons (uses same sizing as font buttons) */
.templateButton,
.templateButtonSelected {
  padding: 0.25rem 0.5rem;
  border-radius: var(--radius-md);
  background-color: var(--rbg-white);
  cursor: pointer;
  font-size: 14px;
  width: 90px;
  height: 60px;
  color: var(--rbg-dark);
  border: 1px solid var(--rbg-light);
}
.templateButtonSelected {
  border: 2px solid var(--rbg-primary);
}

.templatePreviewImage {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  background: var(--rbg-white);
}

/* Unified interactive states for font, color & template buttons */
.fontButton,
.colorButton,
.templateButton {
  border: 1px solid var(--rbg-light);
}
.fontButton:hover,
.colorButton:hover,
.templateButton:hover {
  border-color: var(--rbg-primary);
}
.fontButton:focus-visible,
.colorButton:focus-visible,
.templateButton:focus-visible {
  outline: 2px solid var(--rbg-primary);
  outline-offset: 1px;
}
.fontButtonSelected,
.templateButtonSelected {
  border: 2px solid var(--rbg-primary);
}


.colorButtonRow {
  display: flex;
  flex-wrap: wrap;
  gap: 0.4rem;
  margin-top: 0.5rem;
  align-items: center;
}

/* Consolidated color button styles */
.colorButton,
.colorButtonSelected {
  width: 32px;
  height: 32px;
  border-radius: 4px;
  cursor: pointer;
  position: relative;
  background: var(--swatch, var(--rbg-white));
  border: 1px solid var(--rbg-light);
  box-sizing: border-box;
}

.colorButtonSelected {
  border: 2px solid var(--rbg-primary);
  outline: 2px solid #fff;      /* inner ring for dark colors */
  outline-offset: -3px;         /* draw inside the button */
}

/* Designs: horizontal scroller with arrow buttons */
.designsContainer {
    position: relative;
    padding: 0 28px; /* always reserve equal space for arrows */
    isolation: isolate; /* create stacking context so arrows z-index wins */
    width: 100%;
    box-sizing: border-box;
}
.designsRow {
    display: flex; flex-direction: row; gap: 0.5rem;
    overflow-x: auto; overflow-y: hidden; flex-wrap: nowrap;
    -webkit-overflow-scrolling: touch;
    padding-bottom: 0.25rem;
    scrollbar-width: thin;
    position: relative;
    z-index: 1;
    width: 100%;
    max-width: 100%;
    min-width: 0; /* allow flex child to shrink instead of forcing page to scroll */
}
.designsContainer.hasLeft { }
.designsContainer.noLeft  { }
.designsContainer.hasRight{ }
.designsContainer.noRight { }
.designsRow::-webkit-scrollbar { height: 8px; }
.designsRow::-webkit-scrollbar-thumb { background: var(--rbg-light); border-radius: 8px; }

.designButton, .designButtonSelected {
    padding: 0.25rem;
    border-radius: var(--radius-md);
    background-color: var(--rbg-white);
    cursor: pointer;
    width: 72px;
    height: 54px;
    border: 1px solid var(--rbg-light);
    box-sizing: border-box;
    flex: 0 0 auto;
}
.designButtonSelected { border: 2px solid var(--rbg-primary); }

.designPreviewImage {
    width: 100%;
    height: 100%;
    object-fit: contain;
    display: block;
    background: var(--rbg-white);
}

.scrollArrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: 1px solid rgba(0,0,0,0.15);
    background: rgba(34,34,34,0.5); /* slightly lighter for more transparency */
    box-shadow: 0 2px 6px rgba(0,0,0,0.18);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 1000; /* ensure above thumbnails and tooltips */
    transition: background 120ms ease-in-out, box-shadow 120ms ease-in-out, transform 80ms ease-in-out;
}
.scrollArrowLeft { left: 8px; }
.scrollArrowRight { right: 8px; }
.scrollArrowHidden { visibility: hidden; }
.scrollArrow svg {
  width: 20px;
  height: 20px;
  stroke: #fff;              /* high-contrast chevron */
  stroke-width: 3.5;
}
.scrollArrowDisabled {
    opacity: 0.35;
    visibility: visible;
    pointer-events: none;
}

.scrollArrow:hover {
  background: var(--rbg-primary);
  box-shadow: 0 3px 8px rgba(0,0,0,0.24);
}
.scrollArrow:focus-visible {
  outline: 2px solid var(--rbg-primary);
  outline-offset: 2px;
}

@media screen and (min-width: 768px) {
  .container {
    display: flex;
    flex-direction: row;
    height: 100vh;      /* keep full-height on desktop too */
  }

  .imageContainer,
  .controlContainer {
    flex: 1 1 50%;
    background: var(--rbg-white);
  }

  .controlContainer {
    border-left: 1px solid var(--rbg-light); /* divider between bag and controls */
    padding-left: 1.25rem; /* slight spacing from divider */
    background: var(--rbg-white);
  }

  .image {
    max-width: 400px;
  }

  .labelInputDiv {
    margin-bottom: var(--section-gap-desktop);
    align-items: flex-start;
  }

  .textInput {
    max-width: 420px;
  }
}

@media (min-width: 768px) {
  .designsContainer {
    max-width: 520px;
  }
}
.appContainer {
  position: relative;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  background: var(--rbg-light);
}

.fullscreenPreview {
  width: 100%;
  height: 100%;
  background: var(--rbg-white);
  display: flex;
  align-items: center;
  justify-content: center;
}


.floatingControls {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  justify-content: space-around;
  padding: 0.5rem;
  background: var(--rbg-white);
  z-index: 10;
  /* Visual separator: soft shadow + subtle inner divider, no border */
  box-shadow: var(--shadow-soft), inset 0 1px 0 var(--rbg-light);
  backdrop-filter: none;
}

.drawerToggleButton {
  display: flex;
  flex-direction: column;  /* icon above label */
  align-items: center;
  justify-content: center;
  gap: 2px;
  padding: 0.5rem 1rem;
  border: 1px solid var(--rbg-light);
  border-radius: var(--radius-md);
  background: var(--rbg-white);
  cursor: pointer;
  font-size: 1rem; /* base for label; icon is sized separately */
  min-width: 100px;
  color: var(--rbg-dark);
}
.drawerToggleButton:hover {
  border-color: var(--rbg-primary);
}
.drawerToggleButton:focus {
  outline: 2px solid var(--rbg-primary);
  outline-offset: 1px;
}

.drawerToggleButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  border-color: var(--rbg-light);
  /* Prevent hover/focus styling by overriding */
  background: var(--rbg-white);
}

.btnIcon {
  display: block;
  font-size: 1.25rem; /* icon size */
  line-height: 1;
}
.btnLabel {
  display: block;
  font-size: 0.8rem;  /* smaller than icon */
  line-height: 1.1;
}
.btnIcon svg {
  display: block;
  width: 1.25em;
  height: 1.25em;
  stroke: currentColor;
  fill: none;
}
.btnIcon svg * {
  vector-effect: non-scaling-stroke;
}

@media screen and (max-width: 767px) {
  .floatingControls {
    padding: 0.25rem;          /* tighter bar */
    justify-content: space-between;
    gap: 0.25rem;              /* small gap between buttons */
    /* border-top-width removed, no border for divider */
  }
  .drawerToggleButton {
    padding: 0.375rem 0.5rem;  /* smaller padding */
    font-size: 0.9rem;         /* smaller text */
    min-width: 64px;
    height: 44px;
    border-radius: 5px;        /* slightly tighter corners */
  }
  .btnIcon { font-size: 1.1rem; }
  .btnLabel { font-size: 0.75rem; }
  .btnIcon svg { width: 1.1em; height: 1.1em; }

  .colorButton,
  .colorButtonSelected { width: 30px; height: 30px; }
  .colorButtonRow { gap: 0.35rem; }
}

.drawer {
  position: absolute;
  bottom: 3.5rem;
  left: 0;
  right: 0;
  background: var(--rbg-white);
  overflow-y: hidden;
  padding: 1rem;
  /* Add soft shadow and subtle interior separator, no backdrop blur */
  box-shadow: var(--shadow-drawer), inset 0 1px 0 rgba(0,0,0,0.08);
  z-index: 20;
  transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
  max-height: 0;
  opacity: 0;
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
}

.drawer::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: rgba(0, 0, 0, 0.08);
  pointer-events: none;
}

@media (prefers-reduced-motion: reduce) {
  .drawer {
    transition: none;
  }
}

.drawerVisible {
  max-height: 300px; /* Adjust based on expected drawer content */
  opacity: 1;
}

.drawerHidden {
  max-height: 0;
  opacity: 0;
}
.fontPreviewImage,
.fullscreenImage {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  background: var(--rbg-white);
}

/* === Classes referenced by App.jsx (added for CSS Modules resolution) === */
.inlineLabel {
  display: inline-flex;
  align-items: baseline; /* align text baselines */
  gap: 0.5rem;
}

.inlineLabel .colorLabel {
  display: inline;    /* inline label inside the row */
  margin: 0;          /* remove top/bottom margins that push it off baseline */
  line-height: 1.2;
}

.inlineLabel .selectedColorName {
  margin: 0;          /* align with label */
  line-height: 1.2;
}

 .selectedColorName {
   font-weight: 400; /* name not bold */
   color: var(--rbg-dark);
 }

.selectedDesignInfo {
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
  margin-left: 0.5rem;
  vertical-align: middle;
}
.selectedDesignThumb {
  width: 24px;
  height: 24px;
  object-fit: contain;
  background: var(--rbg-white);
  border: 1px solid var(--rbg-light);
  border-radius: 4px;
}
.selectedDesignName {
  font-size: 0.9rem;
  color: var(--rbg-dark);
}

.sectionTitle {
  font-weight: 700;
  margin: 0 0 0.75rem 0;
  color: var(--rbg-primary);
}

.drawerTitle {
  font-weight: 700;
  margin: 0 0 0.5rem 0;
  color: var(--rbg-primary);
}

.textInput {
  width: 100%;
  padding: 0.5rem 0.75rem;
  border: 1px solid var(--rbg-light);
  border-radius: var(--radius-md);
  font-family: 'Mulish', sans-serif;
  font-size: 1rem;
  color: var(--rbg-dark);
  background: var(--rbg-white);
}
.textInput:focus {
  outline: 2px solid var(--rbg-primary);
  outline-offset: 1px;
}
  .labelInputDiv { gap: 0.3rem; }

/* === Rendering spinner overlay === */
.imageWrapper {
  position: relative;
  width: 100%;
  height: 100%;
}
.spinnerOverlay {
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(255,255,255,0.35);
  pointer-events: none; /* do not block interactions */
}
.spinnerHidden { display: none; }

.spinner {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  border: 4px solid rgba(0,0,0,0.15);
  border-top-color: var(--rbg-primary);
  animation: rbg-spin 0.9s linear infinite;
}

@keyframes rbg-spin {
  to { transform: rotate(360deg); }
}